#!/bin/bash

# Shell script to generate a debian package from a particular tag (configured during the cmake configuration).

#######################################################################################################################
#
# IMPORTANT NOTE:
#
# DO NOT MODIFY THIS FILE inside a project. Instead update the project-template repository and pull the change from
# there. Make sure to keep the file generic, since it will be used by other projects, too.
#
# If you have modified this file inside a project despite this warning, make sure to cherry-pick all your changes
# into the project-template repository immediately.
#
#######################################################################################################################

# This cmake.in file requires the following variables to be set:
# PACKAGE_BASE_NAME This is the debian package name, not the project name (e.g. libraries must start with lib,
#   all lower case, no underscore)
# PACKAGE_TAG_VERSION The tag for which the package is build
# PACKAGE_MAJORMINOR_VERSION The library version without the patch level (i.e. just "MAJOR.MINOR")
# PACKAGE_PATCH_VERSION The patch level
# PACKAGE_MESSAGE The message for the debian package log
# PACKAGE_DEPENDENCY_VERSIONS A space-separated list of dependency names and versions, each connected by a dash, e.g.:
#                             "DeviceAccess-0.15 ControlSystemAdapter-0.1"
# Also the following standard cmake variables are used (should be always correctly set):
# CMAKE_SOURCE_DIR
# PROJECT_NAME

#drop out of the script if anything goes wrong (e.g. non-existing git tag)
set -e

#Create a working directory in order not to merge with the rest in the build directory
rm -rf debian_package
mkdir debian_package
cd debian_package

#The package versions for doocs / Ubuntu contain the codenamePROJECT_BUILDVERSION of the distribution. Get it from the system.
CODENAME=`lsb_release -c | sed "{s/Codename:\s*//}"`

#Obtain build version
BUILD_NUMBER=`"@CMAKE_SOURCE_DIR@/cmake/getDebianBuildVersion" @PROJECT_NAME@ @PACKAGE_MAJORMINOR_VERSION@ ${CODENAME} @PACKAGE_DEPENDENCY_VERSIONS@` || exit 1
export PROJECT_BUILDVERSION="${CODENAME}${BUILD_NUMBER}"

#Check out the correct tag from the master git repository.
#The local directory name has to follow the debian convention
# lowecasepackagenname_package.ver.sion
#Note, we first clone and then checkout the tag because the old git version on
#Ubuntu12.4 does not support to do it in one go.
BUILD_DIR_NAME="@PACKAGE_BASE_NAME@_@PACKAGE_MAJORMINOR_VERSION@-${PROJECT_BUILDVERSION}"
git clone @CMAKE_SOURCE_DIR@ ${BUILD_DIR_NAME}
( cd  ${BUILD_DIR_NAME} &&\
  git checkout @PACKAGE_TAG_VERSION@ &&\
  rm -rf .git )
#Debian convention: file has to end on .orig.tar.gz
tar -czf  ${BUILD_DIR_NAME}.orig.tar.gz  ${BUILD_DIR_NAME}

#Copy the prepared debian packaging config files to the source code
#directroy
cp -r ../debian_from_template  ${BUILD_DIR_NAME}/debian
cd ${BUILD_DIR_NAME}

#Before building the package we will update the changelog. This is easier from a shell script
#because debchange does the right format and the current date, user name and email automatically for us.
#Use the NAME and EMAIL environment variables to get correct values if needed (usually the email is
# user@host instead of first.last@institute, for instance killenb@mskpcx18571.desy.de instead of martin.killenberg@desy.de).
debchange --create --package @PACKAGE_BASE_NAME@ -v @PACKAGE_MAJORMINOR_VERSION@-${PROJECT_BUILDVERSION}-@PACKAGE_PATCH_VERSION@ --distribution ${CODENAME} @PACKAGE_MESSAGE@

#Now everything is prepared and we can actually build the package.
#If you have a gpg signature you can remove the -us and -uc flags and sign the package.
dpkg-buildpackage -rfakeroot -us -uc
