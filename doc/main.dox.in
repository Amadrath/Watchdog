/**
\author Klaus Zenker (HZDR)
\version @watchdog_server_VERSION@
\mainpage Watchdog Server
The watchdog contains two main moudles:
  - SYS: Monitors system paramters
  - PROCESS: Start/stop and monitor a process 

System parameter are read directly from \c /proc/\%PID%/cpuinfo and \c   /sys/devices/system/cpu/present.
Information about processes also taken from \c /proc/ using the \c proc library. By default only one Process module
will be created that can be used to control one process. This is done using the properties:
  - enableProcess
  - path
  - cmd
  
Here \c cmd can also include arguments to be passed to the program. If \c enableProcess is set true a new
process is created using \c fork in combination with \c execv. A detailed documentation is given in 
the documentation of the class ProcessHandler, which is used for the process control. If starting the process fails
the server will retry to start the process (SetMaxFails controls how often restarts are tried, Failed shows the number of fails in the control system).
In order to try again one has to set enableProcess to flase and true again. The same is true if the process is ended from 
outside the watchog. In that case the watchdog restarts the process. The number of restarts is counted and the maximum allowed
number of resets can be set by the user.

It might happen that a started process also starts child processes. The number of processes started is given in the control
system (nChilds). All process statistics are shown for the first child process. If you want to see the statistics for 
another child process increase the pidOffset paramter (0 for the first process) according to the number of total child
processes.  

In order to control more than only one process a dedicated \c xml file needs to be provided. 
Its name is watchdog_server_processes.xml and the contend should look like this:
\code
 <?xml version="1.0" encoding="UTF-8" ?>
<watchdog>
  <process name="PROCESS_1"/>
  <process name="PROCESS_2"/>
</watchdog>
\endcode
In the example above two processes are created. Each of the processes is required to have a unique name assigned.
Further information like an inital path or an initial command are not added to the init file for the following reason. 
If the server crashes or is restarted all variable values are taken from the persistancy file of the server during the restart. 
If one would overwrite the \c path or \c cmd variable with the one from the \c  watchdog_server_processes.xml file the shown 
information would not be true in any case. If the user changed the path or command during the run time of the server 
and started the process its is indicated in the watchdog. After a restart still the watchdog would show that the process
is running, but \c path or \c cmd would show wrong values taken from the \c  watchdog_server_processes.xml file.

\remark 
For each process a link in the proc directory is created! Thus one can access the path \c /proc/self/ without knowing the 
PID of the process. This might be useful in some cases...

\remark 
Since boost version 1.64 a new tool kit is available: boost.process. It can be used to spawn processes without using system calls like
fork/exec. Check if it is more useful compared to the current implementation. It is not used so far, since it is not available in 
Ubuntu 16.04.
*/